from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from apscheduler.schedulers.background import BackgroundScheduler
from datetime import time

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤
word_count = 0


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞."""
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —É—á–∏—Ç—å —á–µ—à—Å–∫–∏–µ —Å–ª–æ–≤–∞! –ö–∞–∂–¥–æ–µ —É—Ç—Ä–æ —è –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ —Å–ª–æ–≤–∞—Ö. "
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –∏—Ö –º–Ω–µ –≤ —á–∞—Ç, –∏ —è –ø–æ—Å—á–∏—Ç–∞—é."
    )


async def check_words(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ª–æ–≤–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    global word_count
    words = update.message.text.split()
    word_count += len(words)
    remaining = 15 - word_count
    if word_count >= 15:
        await update.message.reply_text("–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è, —á–µ–º–ø–∏–æ–Ω! –¢—ã –æ—Ç–ø—Ä–∞–≤–∏–ª –≤—Å–µ —Å–ª–æ–≤–∞ üéâ")
        word_count = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
    else:
        await update.message.reply_text(f"–ú–æ–ª–æ–¥–µ—Ü! –û—Å—Ç–∞–ª–æ—Å—å –µ—â—ë {remaining} —Å–ª–æ–≤.")


async def morning_reminder(context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Ç—Ä–æ–º –≤ 7:00."""
    chat_id = context.job.chat_id
    await context.bot.send_message(
        chat_id=chat_id,
        text="–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–∞, —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ú–∞—Ä–∫–æ–º –ë—Ä–∞–≥—É—Ç–æ–π! üìö "
             "–ù–µ –∑–∞–±—É–¥—å –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —á–µ—à—Å–∫–∏–µ —Å–ª–æ–≤–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Ö –≤ —á–∞—Ç!"
    )


async def evening_check(context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–ª–æ–≤–∞ –≤–µ—á–µ—Ä–æ–º –≤ 20:00."""
    global word_count
    chat_id = context.job.chat_id
    if word_count == 0:
        await context.bot.send_message(
            chat_id=chat_id,
            text="–≠–π! –£–∂–µ 20:00, –∞ —Ç—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞. –¢–∞–∫ –¥–µ–ª–∞ –Ω–µ –¥–µ–ª–∞—é—Ç—Å—è! üò°"
        )
    else:
        remaining = 15 - word_count
        await context.bot.send_message(
            chat_id=chat_id,
            text=f"–¢—ã –æ—Ç–ø—Ä–∞–≤–∏–ª {word_count} —Å–ª–æ–≤. –û—Å—Ç–∞–ª–æ—Å—å –µ—â—ë {remaining}. –ù–µ –∑–∞–±—ã–≤–∞–π, —á–µ–º–ø–∏–æ–Ω!"
        )


async def set_reminders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ 7:00 –∏ 20:00."""
    chat_id = update.message.chat_id
    scheduler = BackgroundScheduler()
    scheduler.start()

    # –£—Ç—Ä–µ–Ω–Ω–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    scheduler.add_job(
        morning_reminder,
        'cron',
        hour=7,
        minute=0,
        args=(context,),
        id="morning_reminder"
    )
    # –í–µ—á–µ—Ä–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    scheduler.add_job(
        evening_check,
        'cron',
        hour=20,
        minute=0,
        args=(context,),
        id="evening_check"
    )
    await update.message.reply_text("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    app = Application.builder().token("7853472490:AAGDx1sj8yA38zmLACxl4iwl7Cl92YswpJw").build()

    # –•–µ–Ω–¥–ª–µ—Ä—ã –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("set_reminders", set_reminders))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, check_words))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()


if __name__ == "__main__":
    main()

